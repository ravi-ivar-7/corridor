{
  "version": 3,
  "sources": ["../../../src/handlers/websocket-handler.ts", "../../../src/handlers/api-handler.ts", "../../../src/handlers/room-manager.ts", "../../../src/durable-object.ts", "../../../src/handlers/landing-page-handler.ts", "../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-So1IZs/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-So1IZs/middleware-loader.entry.ts"],
  "sourceRoot": "E:\\sync\\server\\worker\\.wrangler\\tmp\\dev-M9Jmwi",
  "sourcesContent": ["import { ClipboardMessage, ClipboardItem, WebSocketConnection, ClipboardRoom } from '../types';\r\n\r\nexport class WebSocketHandler {\r\n  private room: ClipboardRoom;\r\n  private state: DurableObjectState;\r\n\r\n  constructor(room: ClipboardRoom, state: DurableObjectState) {\r\n    this.room = room;\r\n    this.state = state;\r\n  }\r\n\r\n  async handleWebSocket(request: Request): Promise<Response> {\r\n    try {\r\n      const token = this.extractToken(request);\r\n      if (!token) {\r\n        return new Response('Token required', { status: 400 });\r\n      }\r\n\r\n      const webSocketPair = new WebSocketPair();\r\n      const [client, server] = Object.values(webSocketPair);\r\n\r\n      await this.handleSession(server, token);\r\n\r\n      return new Response(null, {\r\n        status: 101,\r\n        webSocket: client,\r\n      });\r\n    } catch (error) {\r\n      const errMsg = error instanceof Error ? error.message : String(error);\r\n      console.error('WebSocket error:', error);\r\n      return new Response(`WebSocket error: ${errMsg}`, { status: 500 });\r\n    }\r\n  }\r\n\r\n  private async handleSession(websocket: WebSocket, token: string): Promise<void> {\r\n    try {\r\n      websocket.accept();\r\n      \r\n      const connectionId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n      const connection: WebSocketConnection = {\r\n        id: connectionId,\r\n        websocket,\r\n        token,\r\n        lastPing: Date.now()\r\n      };\r\n\r\n      this.room.connections.set(connectionId, connection);\r\n\r\n      websocket.addEventListener('message', (event) => {\r\n        this.handleMessage(connectionId, event.data);\r\n      });\r\n\r\n      websocket.addEventListener('close', () => {\r\n        this.handleDisconnect(connectionId);\r\n      });\r\n\r\n      await this.sendHistory(connectionId);\r\n    } catch (error) {\r\n      console.error('WebSocket session error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async handleMessage(connectionId: string, data: string): Promise<void> {\r\n    try {\r\n      const message: ClipboardMessage = JSON.parse(data);\r\n      \r\n      switch (message.type) {\r\n        case 'ping':\r\n          await this.handlePing(connectionId);\r\n          break;\r\n        case 'clipboard_update':\r\n          await this.handleClipboardUpdate(connectionId, message);\r\n          break;\r\n        case 'clipboard_history':\r\n          await this.sendHistory(connectionId);\r\n          break;\r\n        case 'clear_history':\r\n          await this.handleClearHistory();\r\n          break;\r\n        default:\r\n          await this.sendError(connectionId, `Unknown message type: ${message.type}`);\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n      await this.sendError(connectionId, `JSON parse error: ${errorMessage}`);\r\n    }\r\n  }\r\n\r\n  private async handlePing(connectionId: string): Promise<void> {\r\n    const connection = this.room.connections.get(connectionId);\r\n    if (connection) {\r\n      connection.lastPing = Date.now();\r\n      connection.websocket.send(JSON.stringify({ type: 'pong' }));\r\n    }\r\n  }\r\n\r\n  private async handleClipboardUpdate(connectionId: string, message: ClipboardMessage): Promise<void> {\r\n    if (!message.data?.content) {\r\n      return;\r\n    }\r\n\r\n    const item: ClipboardItem = {\r\n      id: Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15),\r\n      content: message.data.content,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    this.room.history.unshift(item);\r\n    this.room.history = this.room.history.slice(0, 50);\r\n    this.room.lastActivity = Date.now();\r\n\r\n    await this.state.storage.put(`room:${this.room.token}`, {\r\n      token: this.room.token,\r\n      history: this.room.history,\r\n      lastActivity: this.room.lastActivity\r\n    });\r\n\r\n    await this.broadcastToAll({\r\n      type: 'clipboard_update',\r\n      token: this.room.token,\r\n      data: item\r\n    });\r\n  }\r\n\r\n  private async sendHistory(connectionId: string): Promise<void> {\r\n    const connection = this.room.connections.get(connectionId);\r\n    if (connection) {\r\n      connection.websocket.send(JSON.stringify({\r\n        type: 'clipboard_history',\r\n        token: this.room.token,\r\n        history: this.room.history\r\n      }));\r\n    }\r\n  }\r\n\r\n  private async handleClearHistory(): Promise<void> {\r\n    this.room.history = [];\r\n    this.room.lastActivity = Date.now();\r\n    \r\n    await this.state.storage.put(`room:${this.room.token}`, {\r\n      token: this.room.token,\r\n      history: this.room.history,\r\n      lastActivity: this.room.lastActivity\r\n    });\r\n    \r\n    await this.broadcastToAll({\r\n      type: 'clipboard_history',\r\n      token: this.room.token,\r\n      history: []\r\n    });\r\n  }\r\n\r\n  private async broadcastToAll(message: ClipboardMessage): Promise<void> {\r\n    for (const [id, connection] of this.room.connections) {\r\n      try {\r\n        connection.websocket.send(JSON.stringify(message));\r\n      } catch (error) {\r\n        this.room.connections.delete(id);\r\n      }\r\n    }\r\n  }\r\n\r\n  private async broadcastToOthers(senderId: string, message: ClipboardMessage): Promise<void> {\r\n    for (const [id, connection] of this.room.connections) {\r\n      if (id !== senderId) {\r\n        try {\r\n          connection.websocket.send(JSON.stringify(message));\r\n        } catch (error) {\r\n          this.room.connections.delete(id);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private async sendError(connectionId: string, error: string): Promise<void> {\r\n    const connection = this.room.connections.get(connectionId);\r\n    if (connection) {\r\n      connection.websocket.send(JSON.stringify({\r\n        type: 'error',\r\n        token: this.room.token,\r\n        error\r\n      }));\r\n    }\r\n  }\r\n\r\n  private handleDisconnect(connectionId: string): void {\r\n    this.room.connections.delete(connectionId);\r\n  }\r\n\r\n  private extractToken(request: Request): string | null {\r\n    const url = new URL(request.url);\r\n    return url.searchParams.get('token');\r\n  }\r\n}\r\n", "import { ClipboardItem, ClipboardRoom } from '../types';\r\n\r\nexport class ApiHandler {\r\n  private room: ClipboardRoom;\r\n  private state: DurableObjectState;\r\n\r\n  constructor(room: ClipboardRoom, state: DurableObjectState) {\r\n    this.room = room;\r\n    this.state = state;\r\n  }\r\n\r\n  async handleClipboardAPI(request: Request): Promise<Response> {\r\n    const url = new URL(request.url);\r\n    const pathParts = url.pathname.split('/');\r\n    const token = pathParts[pathParts.length - 1];\r\n\r\n    if (!token) {\r\n      return new Response(JSON.stringify({ error: 'Token required' }), { \r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    switch (request.method) {\r\n      case 'GET':\r\n        return this.handleGetClipboardHistory();\r\n      case 'POST':\r\n        return this.handlePostClipboardUpdate(request);\r\n      case 'DELETE':\r\n        return this.handleClearHistory();\r\n      default:\r\n        return new Response(JSON.stringify({ error: 'Method not allowed' }), { \r\n          status: 405,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n    }\r\n  }\r\n\r\n  private async handleGetClipboardHistory(): Promise<Response> {\r\n    return new Response(JSON.stringify({\r\n      type: 'clipboard_history',\r\n      token: this.room.token,\r\n      history: this.room.history\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  private async handlePostClipboardUpdate(request: Request): Promise<Response> {\r\n    try {\r\n      const body = await request.json() as any;\r\n      \r\n      if (!body.data?.content) {\r\n        return new Response(JSON.stringify({ error: 'Content required' }), { \r\n          status: 400,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n\r\n      const item: ClipboardItem = {\r\n        id: Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15),\r\n        content: body.data.content as string,\r\n        timestamp: Date.now()\r\n      };\r\n\r\n      this.room.history.unshift(item);\r\n      this.room.history = this.room.history.slice(0, 50);\r\n      this.room.lastActivity = Date.now();\r\n\r\n      await this.state.storage.put(`room:${this.room.token}`, {\r\n        token: this.room.token,\r\n        history: this.room.history,\r\n        lastActivity: this.room.lastActivity\r\n      });\r\n\r\n      return new Response(JSON.stringify({ \r\n        success: true, \r\n        message: 'Clipboard updated successfully',\r\n        data: item\r\n      }), {\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n    } catch (error) {\r\n      return new Response(JSON.stringify({ \r\n        error: 'Invalid JSON or request format' \r\n      }), { \r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  }\r\n\r\n  private async handleClearHistory(): Promise<Response> {\r\n    this.room.history = [];\r\n    this.room.lastActivity = Date.now();\r\n    \r\n    await this.state.storage.put(`room:${this.room.token}`, {\r\n      token: this.room.token,\r\n      history: this.room.history,\r\n      lastActivity: this.room.lastActivity\r\n    });\r\n\r\n    return new Response(JSON.stringify({ \r\n      success: true, \r\n      message: 'History cleared successfully' \r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n", "import { ClipboardItem, ClipboardRoom } from '../types';\r\n\r\nexport class RoomManager {\r\n  private state: DurableObjectState;\r\n  private pingInterval: number | null = null;\r\n\r\n  constructor(state: DurableObjectState) {\r\n    this.state = state;\r\n  }\r\n\r\n  async initializeRoom(token: string): Promise<ClipboardRoom> {\r\n    const stored = await this.state.storage.get<{token: string, history: ClipboardItem[], lastActivity: number}>(`room:${token}`);\r\n    \r\n    const room: ClipboardRoom = {\r\n      token,\r\n      connections: new Map(),\r\n      history: stored?.history || [],\r\n      lastActivity: stored?.lastActivity || Date.now()\r\n    };\r\n\r\n    return room;\r\n  }\r\n\r\n  async saveRoom(room: ClipboardRoom): Promise<void> {\r\n    await this.state.storage.put(`room:${room.token}`, {\r\n      token: room.token,\r\n      history: room.history,\r\n      lastActivity: room.lastActivity\r\n    });\r\n  }\r\n\r\n  startPingInterval(room: ClipboardRoom): void {\r\n    if (this.pingInterval) return;\r\n\r\n    this.pingInterval = setInterval(() => {\r\n      this.cleanupStaleConnections(room);\r\n    }, 30000);\r\n  }\r\n\r\n  stopPingInterval(): void {\r\n    if (this.pingInterval) {\r\n      clearInterval(this.pingInterval);\r\n      this.pingInterval = null;\r\n    }\r\n  }\r\n\r\n  private cleanupStaleConnections(room: ClipboardRoom): void {\r\n    const now = Date.now();\r\n    const staleThreshold = 60000;\r\n\r\n    for (const [id, connection] of room.connections) {\r\n      if (now - connection.lastPing > staleThreshold) {\r\n        connection.websocket.close();\r\n        room.connections.delete(id);\r\n      }\r\n    }\r\n  }\r\n}\r\n", "import { ClipboardMessage, ClipboardItem, WebSocketConnection, ClipboardRoom } from './types';\r\nimport { WebSocketHandler } from './handlers/websocket-handler';\r\nimport { ApiHandler } from './handlers/api-handler';\r\nimport { RoomManager } from './handlers/room-manager';\r\n\r\nexport class ClipboardSyncDurableObject {\r\n  private state: DurableObjectState;\r\n  private env: any;\r\n  private room: ClipboardRoom | null = null;\r\n  private roomManager: RoomManager;\r\n  private websocketHandler: WebSocketHandler | null = null;\r\n  private apiHandler: ApiHandler | null = null;\r\n\r\n  constructor(state: DurableObjectState, env: any) {\r\n    this.state = state;\r\n    this.env = env;\r\n    this.roomManager = new RoomManager(state);\r\n  }\r\n\r\n  async fetch(request: Request): Promise<Response> {\r\n    const url = new URL(request.url);\r\n    \r\n    if (url.pathname === '/ws') {\r\n      return this.handleWebSocket(request);\r\n    }\r\n    \r\n    if (url.pathname.startsWith('/api/clipboard/')) {\r\n      return this.handleClipboardAPI(request);\r\n    }\r\n    \r\n    return new Response('Not Found', { status: 404 });\r\n  }\r\n\r\n  private async handleWebSocket(request: Request): Promise<Response> {\r\n    const token = this.extractToken(request);\r\n    if (!token) {\r\n      return new Response('Token required', { status: 400 });\r\n    }\r\n\r\n    // Initialize room if not exists\r\n    if (!this.room) {\r\n      this.room = await this.roomManager.initializeRoom(token);\r\n    }\r\n\r\n    // Create WebSocket handler\r\n    this.websocketHandler = new WebSocketHandler(this.room, this.state);\r\n    \r\n    // Start ping interval for this room\r\n    this.roomManager.startPingInterval(this.room);\r\n\r\n    return this.websocketHandler.handleWebSocket(request);\r\n  }\r\n\r\n  private async handleClipboardAPI(request: Request): Promise<Response> {\r\n    const url = new URL(request.url);\r\n    const pathParts = url.pathname.split('/');\r\n    const token = pathParts[pathParts.length - 1];\r\n\r\n    if (!token) {\r\n      return new Response(JSON.stringify({ error: 'Token required' }), { \r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Initialize room if not exists\r\n    if (!this.room) {\r\n      this.room = await this.roomManager.initializeRoom(token);\r\n    }\r\n\r\n    // Create API handler\r\n    this.apiHandler = new ApiHandler(this.room, this.state);\r\n\r\n    const response = await this.apiHandler.handleClipboardAPI(request);\r\n    \r\n    // Save room state after API operations\r\n    await this.roomManager.saveRoom(this.room);\r\n    \r\n    return response;\r\n  }\r\n\r\n  private extractToken(request: Request): string | null {\r\n    const url = new URL(request.url);\r\n    return url.searchParams.get('token');\r\n  }\r\n}", "export function handleLandingPage(): Response {\r\n  const html = `\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Corridor - Real-time Clipboard Sync</title>\r\n    <style>\r\n        * { margin: 0; padding: 0; box-sizing: border-box; }\r\n        body { \r\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            color: white;\r\n        }\r\n        .container {\r\n            max-width: 800px;\r\n            padding: 2rem;\r\n            text-align: center;\r\n        }\r\n        .logo { font-size: 3rem; font-weight: bold; margin-bottom: 1rem; }\r\n        .subtitle { font-size: 1.2rem; margin-bottom: 2rem; opacity: 0.9; }\r\n        .card {\r\n            background: rgba(255, 255, 255, 0.1);\r\n            backdrop-filter: blur(10px);\r\n            border-radius: 20px;\r\n            padding: 2rem;\r\n            margin: 2rem 0;\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n        }\r\n        .feature { margin: 1rem 0; }\r\n        .feature h3 { margin-bottom: 0.5rem; }\r\n        .links { margin-top: 2rem; }\r\n        .link {\r\n            display: inline-block;\r\n            background: rgba(255, 255, 255, 0.2);\r\n            color: white;\r\n            text-decoration: none;\r\n            padding: 0.8rem 1.5rem;\r\n            border-radius: 10px;\r\n            margin: 0.5rem;\r\n            transition: all 0.3s ease;\r\n        }\r\n        .link:hover {\r\n            background: rgba(255, 255, 255, 0.3);\r\n            transform: translateY(-2px);\r\n        }\r\n        .api-info {\r\n            background: rgba(0, 0, 0, 0.2);\r\n            border-radius: 10px;\r\n            padding: 1rem;\r\n            margin: 1rem 0;\r\n            font-family: 'Courier New', monospace;\r\n            font-size: 0.9rem;\r\n        }\r\n        .status { \r\n            display: inline-block;\r\n            background: #4ade80;\r\n            color: #065f46;\r\n            padding: 0.3rem 0.8rem;\r\n            border-radius: 20px;\r\n            font-size: 0.8rem;\r\n            font-weight: bold;\r\n            margin-bottom: 1rem;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <div class=\"status\">\uD83D\uDFE2 ONLINE</div>\r\n        <h1 class=\"logo\">Corridor</h1>\r\n        <p class=\"subtitle\">Real-time clipboard synchronization across devices</p>\r\n        \r\n        <div class=\"card\">\r\n            <h2>\uD83D\uDE80 Features</h2>\r\n            <div class=\"feature\">\r\n                <h3>Real-time Sync</h3>\r\n                <p>Instant clipboard synchronization across all your devices</p>\r\n            </div>\r\n            <div class=\"feature\">\r\n                <h3>WebSocket & HTTP</h3>\r\n                <p>Dual communication protocols for maximum reliability</p>\r\n            </div>\r\n            <div class=\"feature\">\r\n                <h3>Token-based Security</h3>\r\n                <p>Secure, isolated clipboard rooms with simple token authentication</p>\r\n            </div>\r\n            <div class=\"feature\">\r\n                <h3>Cross-platform</h3>\r\n                <p>Works on Windows, Web, and any device with a browser</p>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"card\">\r\n            <h2>\uD83D\uDD17 Quick Links</h2>\r\n            <div class=\"links\">\r\n                <a href=\"https://corridor-web.vercel.app\" class=\"link\">\uD83C\uDF10 Web App</a>\r\n                <a href=\"https://github.com/yourusername/corridor\" class=\"link\">\uD83D\uDCF1 Windows Client</a>\r\n                <a href=\"/health\" class=\"link\">\u2764\uFE0F Health Check</a>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"card\">\r\n            <h2>\uD83D\uDD27 API Endpoints</h2>\r\n            <div class=\"api-info\">\r\n                <strong>WebSocket:</strong> wss://corridor-worker.corridor-sync.workers.dev/ws?token=YOUR_TOKEN<br>\r\n                <strong>HTTP API:</strong> https://corridor-worker.corridor-sync.workers.dev/api/clipboard/YOUR_TOKEN<br>\r\n                <strong>Health:</strong> https://corridor-worker.corridor-sync.workers.dev/health\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"card\">\r\n            <h2>\uD83D\uDCD6 How to Use</h2>\r\n            <p>1. Visit the <a href=\"https://corridor-web.vercel.app\" style=\"color: #93c5fd;\">web app</a> or download the Windows client</p>\r\n            <p>2. Create or enter a token to join a clipboard room</p>\r\n            <p>3. Start copying and pasting - it syncs in real-time!</p>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>`;\r\n\r\n  return new Response(html, {\r\n    headers: {\r\n      'Content-Type': 'text/html',\r\n      'Cache-Control': 'public, max-age=3600'\r\n    }\r\n  });\r\n}\r\n", "import { ClipboardSyncDurableObject } from './durable-object';\r\nimport { WebSocketHandler } from './handlers/websocket-handler';\r\nimport { ApiHandler } from './handlers/api-handler';\r\nimport { RoomManager } from './handlers/room-manager';\r\nimport { handleLandingPage } from './handlers/landing-page-handler';\r\n\r\nexport { ClipboardSyncDurableObject };\r\n\r\nexport interface Env {\r\n  CLIPBOARD_SYNC: DurableObjectNamespace;\r\n}\r\n\r\nexport default {\r\n  async fetch(request: Request, env: Env): Promise<Response> {\r\n    const url = new URL(request.url);\r\n    \r\n    if (request.method === 'OPTIONS') {\r\n      return handleCORS();\r\n    }\r\n\r\n    if (url.pathname === '/ws') {\r\n      return handleWebSocket(request, env);\r\n    }\r\n\r\n    if (url.pathname.startsWith('/api/clipboard/')) {\r\n      return handleClipboardAPI(request, env);\r\n    }\r\n\r\n    if (url.pathname === '/health') {\r\n      return new Response(JSON.stringify({ status: 'ok', timestamp: Date.now() }), {\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    if (url.pathname === '/') {\r\n      return handleLandingPage();\r\n    }\r\n\r\n    return new Response('Not Found', { status: 404 });\r\n  },\r\n};\r\n\r\nasync function handleWebSocket(request: Request, env: Env): Promise<Response> {\r\n  const url = new URL(request.url);\r\n  const token = url.searchParams.get('token');\r\n\r\n  if (!token) {\r\n    return new Response('Token required', { status: 400 });\r\n  }\r\n\r\n  if (!isValidToken(token)) {\r\n    return new Response('Invalid token', { status: 401 });\r\n  }\r\n\r\n  const id = env.CLIPBOARD_SYNC.idFromName(token);\r\n  const durableObject = env.CLIPBOARD_SYNC.get(id);\r\n  \r\n  return durableObject.fetch(request);\r\n}\r\n\r\nasync function handleClipboardAPI(request: Request, env: Env): Promise<Response> {\r\n  const url = new URL(request.url);\r\n  const pathParts = url.pathname.split('/');\r\n  const token = pathParts[pathParts.length - 1];\r\n\r\n  if (!token) {\r\n    return new Response(JSON.stringify({ error: 'Token required' }), { \r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  if (!isValidToken(token)) {\r\n    return new Response(JSON.stringify({ error: 'Invalid token' }), { \r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const id = env.CLIPBOARD_SYNC.idFromName(token);\r\n  const durableObject = env.CLIPBOARD_SYNC.get(id);\r\n  \r\n  return durableObject.fetch(request);\r\n}\r\n\r\nfunction handleCORS(): Response {\r\n  return new Response(null, {\r\n    status: 200,\r\n    headers: {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, DELETE, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    },\r\n  });\r\n}\r\n\r\n\r\nfunction isValidToken(token: string): boolean {\r\n  if (!token || token.length < 3) return false;\r\n  \r\n  const tokenPattern = /^[a-zA-Z0-9_-]+$/;\r\n  return tokenPattern.test(token);\r\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"E:\\\\sync\\\\server\\\\worker\\\\src\\\\index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"E:\\\\sync\\\\server\\\\worker\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"E:\\\\sync\\\\server\\\\worker\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"E:\\\\sync\\\\server\\\\worker\\\\src\\\\index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"E:\\\\sync\\\\server\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-So1IZs\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"E:\\\\sync\\\\server\\\\worker\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"E:\\\\sync\\\\server\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-So1IZs\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"E:\\\\sync\\\\server\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-So1IZs\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
